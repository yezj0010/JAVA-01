1.使用以下命令启动应用，设置gc为g1，关掉自适应调整参数开关，最大停顿为50毫秒
java -Xmx1g -Xms1g -XX:-UseAdaptiveSizePolicy -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -jar gateway-server-0.0.1-SNAPSHOT.jar

====================================================================================================================
2.然后使用jps命令查看Java进程，见图片，得到进程号为12724

====================================================================================================================
3.使用jmap -heap 12724命令，得到结果见《jmap -heap 12724结果》
Heap Configuration:
   MinHeapFreeRatio         = 40 堆最小空闲比例，默认值40，
   MaxHeapFreeRatio         = 70 堆最大空闲比例，默认值70，
   MaxHeapSize              = 1073741824 (1024.0MB)  最大堆内存，由-Xmx1g指定
   NewSize                  = 1363144 (1.2999954223632812MB)  新生代初始大小，可以由-XX:NewSize设置,-Xmn与它等价
   MaxNewSize               = 643825664 (614.0MB)  这里是最大新生代大小，默认值是最大堆内存的60%，可以由-XX:MaxNewSize设置
   OldSize                  = 5452592 (5.1999969482421875MB)  老年代初始大小，可由-XX:OldSize设置
   NewRatio                 = 2  新生代与老年代的比例，2表示新生代占1/(2+1)=1/3，可由-XX:NewRatio设置
   SurvivorRatio            = 8  存活区与eden比例，8表示存活区占(1+1)/(8+1+1)=2/10，可由-XX:SurvivorRatio设置
   MetaspaceSize            = 21807104 (20.796875MB)  元空间大小，可由-XX:MetaspaceSize设置
   CompressedClassSpaceSize = 1073741824 (1024.0MB)  压缩类空间大小，默认大小为1G，可由-XX:CompressedClassSpaceSize设置
   MaxMetaspaceSize         = 17592186044415 MB  最大元空间大小，可由-XX:MaxMetaspaceSize设置，该值很大，等效于无穷大
   G1HeapRegionSize         = 1048576 (1.0MB)  堆每块大小，可由-XX:G1HeapRegionSize设置，必须为2的次方，1,2,4,8..最大值32MB

Heap Usage:
G1 Heap:
   regions  = 1024   分成的区块数量
   capacity = 1073741824 (1024.0MB)    最大容量1G
   used     = 87246464 (83.2047119140625MB)   已经使用83M多，与下方eden+survivor+old相等
   free     = 986495360 (940.7952880859375MB)   空间未用空间
   8.125460147857666% used   已使用比例
G1 Young Generation:
Eden Space:
   regions  = 55   已经分配了55块
   capacity = 183500800 (175.0MB)    目前分配了175M的容量
   used     = 57671680 (55.0MB)      目前使用了55M
   free     = 125829120 (120.0MB)    空闲120M
   31.428571428571427% used
Survivor Space:
   regions  = 25    已经分配了25M
   capacity = 26214400 (25.0MB)  目前分配了25M
   used     = 26214400 (25.0MB)  已经使用了25M
   free     = 0 (0.0MB)          空闲0
   100.0% used
G1 Old Generation:
   regions  = 4      已经分配了4块
   capacity = 864026624 (824.0MB)  目前分配了824M
   used     = 3360384 (3.2047119140625MB)  已经使用3M多
   free     = 860666240 (820.7952880859375MB)   剩余820M
   0.3889213487939927% used

从上可以看出，G1的内存分为年轻代（eden区，一个survivor区），老年代。整个内存被为了多个块，这里是1024块，每块大小1M。
老年代与新生代比例也不是严格的按照NewRatio来划分，因为目前还没有用满。eden和survivor的比例也一样的原因。

====================================================================================================================
4.jmap -histo 12724
该命令查看jvm堆中目前创建的对象，对应的数量，对应的空间，从大到小排序，详情见《jmap -histo 12724结果.txt》
可以看出[C也就是char[]最多了，其次是[I（int[]）,[B(byte[]),String，等等。

====================================================================================================================
5.jstat -gc 12724 1000
E:\>jstat -gc 12724 1000
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC       MU      CCSC   CCSU      YGC   YGCT   FGC     FGCT     GCT
 0.0   25600.0  0.0   25600.0 179200.0 58368.0   843776.0    3281.6   34224.0 32632.0 4528.0 4214.8      6    0.032   0      0.000    0.032
 0.0   25600.0  0.0   25600.0 179200.0 58368.0   843776.0    3281.6   34224.0 32632.0 4528.0 4214.8      6    0.032   0      0.000    0.032
 0.0   25600.0  0.0   25600.0 179200.0 58368.0   843776.0    3281.6   34224.0 32632.0 4528.0 4214.8      6    0.032   0      0.000    0.032

后面带C的表示容量，U表示使用量。
s0都是0,进一步说明g1中存活区部分from和to,
eden容量179200KB，使用58368KB，正好对应上面的175MB，使用量这里是57MB，因为过去了一段时间使用量增长了。
OC ,OU是老年代的容量和使用量。MC，MU是metaspace的容量和使用量。CCSC，CCSU是压缩类空间的容量和使用量。
YGC表示young gc发生的次数，YGCT表示累计总时间，也就是平均每次young gc耗时0.032/6 约等于5毫秒
FGC表示full gc次数，FGCT表示full gc累计时间，这里都是0，表示没有发生full gc
GCT表示所有gc总累计时间。

====================================================================================================================
6.jstat -gcutil 12724 1000
E:\>jstat -gcutil 12724 1000
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00 100.00  32.57   0.39  95.35  93.08      6    0.032     0    0.000    0.032
  0.00 100.00  32.57   0.39  95.35  93.08      6    0.032     0    0.000    0.032
  0.00 100.00  32.57   0.39  95.35  93.08      6    0.032     0    0.000    0.032
这里是上面的统计版本，数字表示使用率。

====================================================================================================================
7.jstack -l 12724，结果见《jstack -l 12724结果.txt》
这个可以看到线程信息，可以从中找到一些死锁，哪些线程在运行，哪些线程在等待。
根据线上的问题，可以从中找到一些有用的信息。

从中可以看到10个http-nio线程，接收http请求。
13个Parallel GC线程，3个G1 Parallel Marking线程
没有死锁。







